SPICE: API
===================================

Mesh Transformations
------------------

Transform Functions
~~~~~~~~~~~~~~~~~

.. function:: transform(mesh: MeshModel, vector: Float[Array, "3"]) -> MeshModel

   Transform the position of a mesh model based on a given vector.

   This function applies a transformation to the mesh model's position by updating its center
   with the provided vector. PHOEBE models are considered read-only within SPICE.

   :param mesh: The mesh model to be transformed
   :param vector: The vector by which the mesh's position is to be updated
   :return: The transformed mesh model with its position updated
   :raises ValueError: If the mesh model is an instance of PhoebeModel

.. function:: update_parameter(mesh: MeshModel, parameter: Union[str, int, ArrayLike], parameter_values: Float[Array, "n_mesh_elements n_parameters"], parameter_names: List[str] = None) -> MeshModel

   Update a specific parameter or set of parameters in the mesh model.

   This function allows updating one or multiple parameters of the mesh model. It can handle
   parameter specification by name (string), index (integer), or an array-like of indices.

   :param mesh: The mesh model to be updated
   :param parameter: The parameter(s) to update - can be name, index or array of indices
   :param parameter_values: The new value(s) for the specified parameter(s)
   :param parameter_names: List of parameter names used for the model
   :return: The updated mesh model
   :raises ValueError: If parameter name not found or mesh is PhoebeModel

.. function:: update_parameters(mesh: MeshModel, parameters: Union[List[str], List[int]], parameter_values: Float[Array, "n_mesh_elements n_parameters"], parameter_names: List[str] = None) -> MeshModel

   Update multiple parameters in the mesh model simultaneously.

   More efficient than calling update_parameter multiple times when updating several parameters at once.

   :param mesh: The mesh model to be updated
   :param parameters: List of parameter names or indices to update
   :param parameter_values: New values for the specified parameters
   :param parameter_names: List of parameter names used for the model
   :return: The updated mesh model
   :raises ValueError: If parameter names not found or mesh is PhoebeModel

Rotation Functions
~~~~~~~~~~~~~~~~

.. function:: evaluate_rotation(mesh: MeshModel, t: float) -> MeshModel

   Evaluate the rotation of a mesh model at a specific time.

   Updates the mesh model's rotation parameters based on the given time.

   :param mesh: The mesh model to evaluate rotation for
   :param t: The time at which to evaluate the rotation (seconds)
   :return: The mesh model with updated rotation parameters
   :raises ValueError: If mesh is PhoebeModel

.. function:: evaluate_body_orbit(m: MeshModel, orbital_velocity: float) -> MeshModel

   Evaluate the effects of an orbit on a mesh model.

   :param m: Mesh model of an orbiting body
   :param orbital_velocity: Orbital velocity in km/s
   :return: Mesh model with updated parameters

Pulsation Functions
~~~~~~~~~~~~~~~~~

.. function:: add_pulsations(m: MeshModel, m_orders: Float[Array, "n_pulsations"], n_degrees: Float[Array, "n_pulsations"], periods: Float[Array, "n_pulsations"], fourier_series_parameters: Float[Array, "n_pulsations n_terms 2"], pulsation_axes: Float[Array, "n_pulsations 3"] = None, pulsation_angles: Float[Array, "n_pulsations"] = None) -> MeshModel

   Adds multiple pulsation effects to a mesh model using spherical harmonics and Fourier series parameters.

   :param m: The mesh model to add pulsation effects to
   :param m_orders: Array of orders (m) of the spherical harmonics
   :param n_degrees: Array of degrees (n) of the spherical harmonics  
   :param periods: Array of pulsation periods in seconds
   :param fourier_series_parameters: Array of dynamic parameters for the Fourier series
   :param pulsation_axes: Array of pulsation axes (defaults to rotation axis)
   :param pulsation_angles: Array of pulsation angles (defaults to zero)
   :return: The mesh model with updated pulsation parameters
   :raises ValueError: If mesh is PhoebeModel or input arrays have inconsistent lengths

.. function:: reset_pulsations(m: MeshModel) -> MeshModel

   Resets the pulsation parameters of a mesh model to non-pulsating model values.

   :param m: The mesh model to reset pulsation parameters for
   :return: The mesh model with pulsation parameters reset
   :raises ValueError: If mesh is PhoebeModel

.. function:: evaluate_pulsations(m: MeshModel, t: ArrayLike) -> MeshModel

   Evaluates and updates the mesh model with pulsation effects at a specific time.

   Calculates pulsation effects using Fourier series parameters for both static and dynamic components.
   Updates the mesh with calculated offsets and velocities.

   :param m: The mesh model to evaluate pulsations for
   :param t: The time at which to evaluate the pulsations
   :return: The mesh model updated with pulsation effects
   :raises ValueError: If mesh is PhoebeModel
