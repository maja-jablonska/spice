SPICE: API
===================================

Models
------

MeshModel
~~~~~~~~~
.. autoclass:: spice.models.mesh_model.MeshModel
   :members:
   :inherited-members:
   :show-inheritance:
   :exclude-members: count, index

   .. py:attribute:: center
      :type: Float[Array, "3"]

      Center position vector of the mesh model.

   .. py:attribute:: radius
      :type: float

      Radius in solar radii.

   .. py:attribute:: mass
      :type: float 

      Mass in solar masses.

   .. py:attribute:: d_vertices
      :type: Float[Array, "n_vertices 3"]

      Vertices positions relative to center.

   .. py:attribute:: faces
      :type: Float[Array, "n_faces 3"]

      Triangle face indices.

   .. py:attribute:: d_centers
      :type: Float[Array, "n_mesh_elements 3"]

      Triangle centers relative to center.

   .. py:attribute:: base_areas
      :type: Float[Array, "n_mesh_elements"]

      Base surface areas of triangles.

   .. py:attribute:: parameters
      :type: Float[Array, "n_mesh_elements n_parameters"]

      Physical parameters for each mesh element.

   .. py:attribute:: rotation_velocities
      :type: Float[Array, "n_mesh_elements 3"]

      Rotation velocities in km/s.

   .. py:attribute:: vertices_pulsation_offsets
      :type: Float[Array, "n_vertices 3"]

      Pulsation offsets for vertices in km/s.

   .. py:attribute:: center_pulsation_offsets
      :type: Float[Array, "n_mesh_elements 3"]

      Pulsation offsets for centers in km/s.

   .. py:attribute:: area_pulsation_offsets
      :type: Float[Array, "n_mesh_elements"]

      Pulsation offsets for areas.

   .. py:attribute:: pulsation_velocities
      :type: Float[Array, "n_mesh_elements 3"]

      Pulsation velocities in km/s.

   .. py:attribute:: rotation_axis
      :type: Float[Array, "3"]

      Rotation axis vector.

   .. py:attribute:: rotation_matrix
      :type: Float[Array, "3 3"]

      Rotation transformation matrix.

   .. py:attribute:: rotation_matrix_prim
      :type: Float[Array, "3 3"]

      Primary rotation transformation matrix.

   .. py:attribute:: axis_radii
      :type: Float[Array, "n_mesh_elements"]

      Radii from rotation axis.

   .. py:attribute:: occluded_areas
      :type: Float[Array, "n_mesh_elements"]

      Areas of occluded mesh elements.

   .. py:attribute:: los_vector
      :type: Float[Array, "3"]

      Line-of-sight vector.

   .. py:attribute:: spherical_harmonics_parameters
      :type: Float[Array, "n_puls_orders 2"]

      Parameters for spherical harmonics.

   .. py:attribute:: pulsation_periods
      :type: Float[Array, "n_puls_orders"]

      Periods of pulsation modes.

   .. py:attribute:: fourier_series_parameters
      :type: Float[Array, "n_puls_orders n_fourier_orders 2"]

      Fourier series parameters for pulsations.

   .. py:attribute:: pulsation_axes
      :type: Float[Array, "n_puls_orders 3"]

      Axes of pulsation modes.

   .. py:attribute:: pulsation_angles
      :type: Float[Array, "n_puls_orders"]

      Angles of pulsation modes.

IcosphereModel
~~~~~~~~~~~~~
.. autoclass:: spice.models.mesh_model.IcosphereModel
   :members:
   :inherited-members:
   :show-inheritance:
   :exclude-members: count, index, construct

   .. method:: construct(n_vertices: int, radius: float, mass: float, parameters: Union[float, Float[Array, "n_mesh_elements n_parameters"]], parameter_names: List[str], max_pulsation_mode: int = 3, max_fourier_order: int = 5, override_log_g: bool = True, log_g_index: Optional[int] = None) -> IcosphereModel
      
      Constructs an IcosphereModel with specified stellar and mesh properties.

      This method generates an icosphere mesh and initializes the model with given parameters, including
      stellar properties (mass, radius) and mesh properties (vertices, faces, areas, centers). 
      It also handles the calculation of surface gravity (log g) values if required.

      :param n_vertices: Number of vertices for the icosphere mesh
      :param radius: Radius of the icosphere in solar radii
      :param mass: Mass of the stellar object in solar masses
      :param parameters: Parameters for the model, can be a single value or an array
      :param parameter_names: Names of the parameters, used for identifying log g parameter
      :param max_pulsation_mode: Maximum pulsation mode for the model, defaults to 3
      :param max_fourier_order: Maximum order of Fourier series for pulsation calculation, defaults to 5
      :param override_log_g: Whether to override the log g values based on model's mass and centers, defaults to True
      :param log_g_index: Index of the log g parameter in parameters array. Required if override_log_g is True and specific log g parameter name not in parameter_names
      :return: An instance of IcosphereModel initialized with the specified properties

Constants
~~~~~~~~~
.. data:: spice.models.mesh_model.LOG_G_NAMES
   :type: List[str]
   :value: ['logg', 'loggs', 'log_g', 'log_gs', 'log g', 'log gs', 'surface gravity', 'surface gravities', 'surface_gravity', 'surface_gravities']

   List of valid parameter names for surface gravity. If the parameter name is not in this list, the surface gravity will be calculated using the mass and center positions.

.. data:: spice.models.mesh_model.DEFAULT_LOS_VECTOR
   :type: jnp.ndarray
   :value: [0., 1., 0.]

   Default line-of-sight vector (from Y direction).

.. data:: spice.models.mesh_model.DEFAULT_ROTATION_AXIS
   :type: jnp.ndarray 
   :value: [0., 0., 1.]

   Default rotation axis (Z axis).

.. data:: spice.models.mesh_model.DEFAULT_MAX_PULSATION_MODE_PARAMETER
   :type: int
   :value: 3

   Default maximum pulsation mode.

.. data:: spice.models.mesh_model.DEFAULT_FOURIER_ORDER  
   :type: int
   :value: 5

   Default Fourier order for pulsations.

Helper Functions
~~~~~~~~~~~~~~

.. function:: calculate_log_gs(mass: float, d_centers: ArrayLike, rot_velocities: ArrayLike = 0.0)

   Calculates surface gravity (log g) values for mesh elements based on mass, center positions and rotation velocities.

   The surface gravity is calculated using:

   .. math::

      \log g = \log \left(\frac{GM}{R^2} - \frac{v_{rot}^2}{R}\right) - \log(9.80665)

   where:
   - G is the gravitational constant (in solar units)
   - M is the mass in solar masses 
   - R is the radius at each mesh point in solar radii
   - v_rot is the rotation velocity in km/s
   - 9.80665 converts from solar surface gravity units to cgs units (cm/s^2)

   :param mass: Mass of the star in solar masses
   :param d_centers: Center positions of mesh elements relative to star center
   :param rot_velocities: Rotation velocities of mesh elements in km/s, defaults to 0.0
   :return: Array of log g values for each mesh element